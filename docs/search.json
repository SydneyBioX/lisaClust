[{"path":"/articles/IntroductiontolisaClust.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Clustering of Local Indicators of Spatial Assocation (LISA) curves","text":"","code":"if (!require(\"BiocManager\"))     install.packages(\"BiocManager\") BiocManager::install(\"lisaClust\") # load required packages library(lisaClust) library(spicyR) library(ggplot2) library(SingleCellExperiment)"},{"path":"/articles/IntroductiontolisaClust.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Clustering of Local Indicators of Spatial Assocation (LISA) curves","text":"Clustering local indicators spatial association (LISA) functions methodology identifying consistent spatial organisation multiple cell-types unsupervised way. can used enable characterization interactions multiple cell-types simultaneously can complement traditional pairwise analysis. implementation LISA curves localised summary L-function Poisson point process model. framework lisaClust can used provide high-level summary cell-type colocalization high-parameter spatial cytometry data, facilitating identification distinct tissue compartments identification complex cellular microenvironments.","code":""},{"path":[]},{"path":"/articles/IntroductiontolisaClust.html","id":"generate-toy-data","dir":"Articles","previous_headings":"Quick start","what":"Generate toy data","title":"Clustering of Local Indicators of Spatial Assocation (LISA) curves","text":"illustrate lisaClust framework, consider simple toy example two cell-types completely separated spatially. simulate data two different images.","code":"set.seed(51773) x <- round(c(runif(200),runif(200)+1,runif(200)+2,runif(200)+3,            runif(200)+3,runif(200)+2,runif(200)+1,runif(200)),4)*100 y <- round(c(runif(200),runif(200)+1,runif(200)+2,runif(200)+3,              runif(200),runif(200)+1,runif(200)+2,runif(200)+3),4)*100 cellType <- factor(paste('c',rep(rep(c(1:2),rep(200,2)),4),sep = '')) imageID <- rep(c('s1', 's2'),c(800,800))  cells <- data.frame(x, y, cellType, imageID)  ggplot(cells, aes(x,y, colour = cellType)) + geom_point() + facet_wrap(~imageID)"},{"path":"/articles/IntroductiontolisaClust.html","id":"create-segmentedcellexperiment-object","dir":"Articles","previous_headings":"Quick start","what":"Create SegmentedCellExperiment object","title":"Clustering of Local Indicators of Spatial Assocation (LISA) curves","text":"First store data SegmentedCells object.","code":"cellExp <- SegmentedCells(cells, cellTypeString = 'cellType')"},{"path":"/articles/IntroductiontolisaClust.html","id":"running-lisaclust","dir":"Articles","previous_headings":"Quick start","what":"Running lisaCLust","title":"Clustering of Local Indicators of Spatial Assocation (LISA) curves","text":"can use convience function lisaClust simultaneously calculate local indicators spatial association (LISA) functions using lisa function perform k-means clustering.","code":"cellExp <- lisaClust(cellExp, k = 2)"},{"path":"/articles/IntroductiontolisaClust.html","id":"plot-identified-regions","dir":"Articles","previous_headings":"Quick start","what":"Plot identified regions","title":"Clustering of Local Indicators of Spatial Assocation (LISA) curves","text":"hatchingPlot function can used construct ggplot object regions marked different hatching patterns. allows us plot regions cell-types visualization.","code":"hatchingPlot(cellExp, useImages = c('s1','s2'))"},{"path":"/articles/IntroductiontolisaClust.html","id":"using-other-clustering-methods-","dir":"Articles","previous_headings":"Quick start","what":"Using other clustering methods.","title":"Clustering of Local Indicators of Spatial Assocation (LISA) curves","text":"lisaClust function convenient, implemented exhaustive suite clustering methods easy . just two simple steps.","code":""},{"path":"/articles/IntroductiontolisaClust.html","id":"generate-lisa-curves","dir":"Articles","previous_headings":"Quick start > Using other clustering methods.","what":"Generate LISA curves","title":"Clustering of Local Indicators of Spatial Assocation (LISA) curves","text":"can calculate local indicators spatial association (LISA) functions using lisa function. LISA curves localised summary L-function Poisson point process model. radii calculated can set Rs.","code":"lisaCurves <- lisa(cellExp, Rs = c(20, 50, 100))"},{"path":"/articles/IntroductiontolisaClust.html","id":"perform-some-clustering","dir":"Articles","previous_headings":"Quick start > Using other clustering methods.","what":"Perform some clustering","title":"Clustering of Local Indicators of Spatial Assocation (LISA) curves","text":"LISA curves can used cluster cells. use k-means clustering, clustering methods like SOM used. can store cell clusters cell “regions” SegmentedCells object using cellAnnotation() <- function.","code":"kM <- kmeans(lisaCurves,2) cellAnnotation(cellExp, \"region\") <- paste('region',kM$cluster,sep = '_')"},{"path":"/articles/IntroductiontolisaClust.html","id":"alternative-hatching-plot","dir":"Articles","previous_headings":"Quick start","what":"Alternative hatching plot","title":"Clustering of Local Indicators of Spatial Assocation (LISA) curves","text":"also create plot using geom_hatching scale_region_manual. ## Faster ploting hatchingPlot can quite slow large images high nbp linewidth. often useful simply plot regions without cell type information.","code":"df <- as.data.frame(cellSummary(cellExp))  p <- ggplot(df,aes(x = x,y = y, colour = cellType, region = region)) +    geom_point() +    facet_wrap(~imageID) +   geom_hatching(window = \"concave\",                  line.spacing = 11,                  nbp = 50,                  line.width = 2,                  hatching.colour = \"gray20\",                 window.length = NULL) +   theme_minimal() +    scale_region_manual(values = 6:7, labels = c('ab','cd'))  p df <- as.data.frame(cellSummary(cellExp)) df <- df[df$imageID == \"s1\", ]  p <- ggplot(df,aes(x = x,y = y, colour  = region)) +    geom_point() +   theme_classic() p"},{"path":"/articles/IntroductiontolisaClust.html","id":"using-a-singlecellexperiment","dir":"Articles","previous_headings":"","what":"Using a SingleCellExperiment","title":"Clustering of Local Indicators of Spatial Assocation (LISA) curves","text":"lisaClust function also works SingleCellExperiment. First lets create SingleCellExperiment object. lisaClust just needs columns colData corresponding x y coordinates cells, column annotating cell types cells column indicating image cell came . can plot regions using following.","code":"sce <- SingleCellExperiment(colData = cellSummary(cellExp)) sce <- lisaClust(sce,                   k = 2,                   spatialCoords = c(\"x\", \"y\"),                   cellType = \"cellType\",                  imageID = \"imageID\") hatchingPlot(sce)"},{"path":"/articles/IntroductiontolisaClust.html","id":"damond-et-al--islet-data-","dir":"Articles","previous_headings":"","what":"Damond et al. islet data.","title":"Clustering of Local Indicators of Spatial Assocation (LISA) curves","text":"apply lisaClust framework three images pancreatic islets Map Human Type 1 Diabetes Progression Imaging Mass Cytometry Damond et al. (2019).","code":""},{"path":"/articles/IntroductiontolisaClust.html","id":"read-in-data","dir":"Articles","previous_headings":"Damond et al. islet data.","what":"Read in data","title":"Clustering of Local Indicators of Spatial Assocation (LISA) curves","text":"start reading data storing SegmentedCells object. data format consistent outputted CellProfiler.","code":"isletFile <- system.file(\"extdata\",\"isletCells.txt.gz\", package = \"spicyR\") cells <- read.table(isletFile, header = TRUE) cellExp <- SegmentedCells(cells, cellProfiler = TRUE)"},{"path":"/articles/IntroductiontolisaClust.html","id":"cluster-cell-types","dir":"Articles","previous_headings":"Damond et al. islet data.","what":"Cluster cell-types","title":"Clustering of Local Indicators of Spatial Assocation (LISA) curves","text":"data include annotation cell-types cell. extract marker intensities SegmentedCells object using cellMarks. perform k-means clustering eight clusters store cell-type clusters SegmentedCells object using cellType() <-.","code":"markers <- cellMarks(cellExp) kM <- kmeans(markers,10) cellType(cellExp) <- paste('cluster', kM$cluster, sep = '')"},{"path":"/articles/IntroductiontolisaClust.html","id":"generate-lisa-curves-1","dir":"Articles","previous_headings":"Damond et al. islet data.","what":"Generate LISA curves","title":"Clustering of Local Indicators of Spatial Assocation (LISA) curves","text":", can calculate perform k-means clustering local indicators spatial association (LISA) functions using lisaClust function. regions stored cellExp can extracted.","code":"cellExp <- lisaClust(cellExp, k = 2, Rs = c(10,20,50)) cellAnnotation(cellExp, \"region\") |>   head() ## [1] \"region_1\" \"region_1\" \"region_1\" \"region_1\" \"region_1\" \"region_1\""},{"path":"/articles/IntroductiontolisaClust.html","id":"examine-cell-type-enrichment","dir":"Articles","previous_headings":"Damond et al. islet data.","what":"Examine cell type enrichment","title":"Clustering of Local Indicators of Spatial Assocation (LISA) curves","text":"check see cell types appear frequently region expected chance.","code":"regionMap(cellExp, type = \"bubble\")"},{"path":"/articles/IntroductiontolisaClust.html","id":"plot-identified-regions-1","dir":"Articles","previous_headings":"Damond et al. islet data.","what":"Plot identified regions","title":"Clustering of Local Indicators of Spatial Assocation (LISA) curves","text":"Finally, can use hatchingPlot construct ggplot object regions marked different hatching patterns. allows us visualize two regions ten cell-types simultaneously.","code":"hatchingPlot(cellExp)"},{"path":"/articles/IntroductiontolisaClust.html","id":"sessioninfo","dir":"Articles","previous_headings":"","what":"sessionInfo()","title":"Clustering of Local Indicators of Spatial Assocation (LISA) curves","text":"","code":"sessionInfo() ## R version 4.2.2 (2022-10-31) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: EndeavourOS ##  ## Matrix products: default ## BLAS:   /usr/lib/libblas.so.3.10.1 ## LAPACK: /usr/lib/liblapack.so.3.10.1 ##  ## locale: ##  [1] LC_CTYPE=en_AU.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_AU.UTF-8        LC_COLLATE=en_AU.UTF-8     ##  [5] LC_MONETARY=en_AU.UTF-8    LC_MESSAGES=en_AU.UTF-8    ##  [7] LC_PAPER=en_AU.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_AU.UTF-8 LC_IDENTIFICATION=C        ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] SingleCellExperiment_1.20.0 SummarizedExperiment_1.28.0 ##  [3] Biobase_2.58.0              GenomicRanges_1.50.1        ##  [5] GenomeInfoDb_1.34.2         IRanges_2.32.0              ##  [7] S4Vectors_0.36.0            BiocGenerics_0.44.0         ##  [9] MatrixGenerics_1.10.0       matrixStats_0.62.0          ## [11] ggplot2_3.4.0               spicyR_1.10.0               ## [13] lisaClust_1.5.6             BiocStyle_2.26.0            ##  ## loaded via a namespace (and not attached): ##   [1] SpatialExperiment_1.8.0   minqa_1.2.5               ##   [3] colorspace_2.0-3          rjson_0.2.21              ##   [5] deldir_1.0-6              ellipsis_0.3.2            ##   [7] class_7.3-20              rprojroot_2.0.3           ##   [9] scuttle_1.8.0             XVector_0.38.0            ##  [11] fftwtools_0.9-11          fs_1.5.2                  ##  [13] spatstat.data_3.0-0       farver_2.1.1              ##  [15] fansi_1.0.3               codetools_0.2-18          ##  [17] splines_4.2.2             R.methodsS3_1.8.2         ##  [19] sparseMatrixStats_1.10.0  cachem_1.0.6              ##  [21] knitr_1.40                polyclip_1.10-4           ##  [23] jsonlite_1.8.3            nloptr_2.0.3              ##  [25] R.oo_1.25.0               pheatmap_1.0.12           ##  [27] ggforce_0.4.1             HDF5Array_1.26.0          ##  [29] spatstat.sparse_3.0-0     BiocManager_1.30.19       ##  [31] compiler_4.2.2            dqrng_0.3.0               ##  [33] assertthat_0.2.1          Matrix_1.5-1              ##  [35] fastmap_1.1.0             limma_3.54.0              ##  [37] cli_3.4.1                 tweenr_2.0.2              ##  [39] htmltools_0.5.3           tools_4.2.2               ##  [41] lmerTest_3.1-3            gtable_0.3.1              ##  [43] glue_1.6.2                GenomeInfoDbData_1.2.9    ##  [45] dplyr_1.0.10              V8_4.2.2                  ##  [47] Rcpp_1.0.9                jquerylib_0.1.4           ##  [49] pkgdown_2.0.6             vctrs_0.5.0               ##  [51] rhdf5filters_1.10.0       nlme_3.1-160              ##  [53] DelayedMatrixStats_1.20.0 spatstat.random_3.0-1     ##  [55] xfun_0.34                 stringr_1.4.1             ##  [57] lme4_1.1-31               beachmat_2.14.0           ##  [59] lifecycle_1.0.3           goftest_1.2-3             ##  [61] scam_1.2-13               edgeR_3.40.0              ##  [63] MASS_7.3-58.1             zlibbioc_1.44.0           ##  [65] scales_1.2.1              spatstat.core_2.4-4       ##  [67] ragg_1.2.4                spatstat.utils_3.0-1      ##  [69] parallel_4.2.2            rhdf5_2.42.0              ##  [71] RColorBrewer_1.1-3        curl_4.3.3                ##  [73] yaml_2.3.6                memoise_2.0.1             ##  [75] sass_0.4.2                rpart_4.1.19              ##  [77] stringi_1.7.8             highr_0.9                 ##  [79] desc_1.4.2                boot_1.3-28               ##  [81] BiocParallel_1.32.1       rlang_1.0.6               ##  [83] pkgconfig_2.0.3           systemfonts_1.0.4         ##  [85] bitops_1.0-7              evaluate_0.18             ##  [87] lattice_0.20-45           purrr_0.3.5               ##  [89] tensor_1.5                Rhdf5lib_1.20.0           ##  [91] labeling_0.4.2            tidyselect_1.2.0          ##  [93] magrittr_2.0.3            bookdown_0.29             ##  [95] R6_2.5.1                  magick_2.7.3              ##  [97] generics_0.1.3            DelayedArray_0.24.0       ##  [99] DBI_1.1.3                 withr_2.5.0               ## [101] pillar_1.8.1              mgcv_1.8-41               ## [103] abind_1.4-5               RCurl_1.98-1.9            ## [105] tibble_3.1.8              DropletUtils_1.18.0       ## [107] utf8_1.2.2                spatstat.geom_3.0-3       ## [109] rmarkdown_2.17            locfit_1.5-9.6            ## [111] grid_4.2.2                data.table_1.14.4         ## [113] digest_0.6.30             tidyr_1.2.1               ## [115] numDeriv_2016.8-1.1       R.utils_2.12.1            ## [117] textshaping_0.3.6         munsell_0.5.0             ## [119] concaveman_1.1.0          bslib_0.4.1"},{"path":"/articles/lisaClust.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Introduction to Clustering of Local Indicators of Spatial Assocation (LISA) curves","text":"","code":"if (!require(\"BiocManager\"))     install.packages(\"BiocManager\") BiocManager::install(\"lisaClust\") # load required packages library(lisaClust) library(spicyR) library(ggplot2) library(SingleCellExperiment)"},{"path":"/articles/lisaClust.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Introduction to Clustering of Local Indicators of Spatial Assocation (LISA) curves","text":"Clustering local indicators spatial association (LISA) functions methodology identifying consistent spatial organisation multiple cell-types unsupervised way. can used enable characterization interactions multiple cell-types simultaneously can complement traditional pairwise analysis. implementation LISA curves localised summary L-function Poisson point process model. framework lisaClust can used provide high-level summary cell-type colocalization high-parameter spatial cytometry data, facilitating identification distinct tissue compartments identification complex cellular microenvironments.","code":""},{"path":[]},{"path":"/articles/lisaClust.html","id":"generate-toy-data","dir":"Articles","previous_headings":"Quick start","what":"Generate toy data","title":"Introduction to Clustering of Local Indicators of Spatial Assocation (LISA) curves","text":"illustrate lisaClust framework, consider simple toy example two cell-types completely separated spatially. simulate data two different images.","code":"set.seed(51773) x <- round(c(runif(200),runif(200)+1,runif(200)+2,runif(200)+3,            runif(200)+3,runif(200)+2,runif(200)+1,runif(200)),4)*100 y <- round(c(runif(200),runif(200)+1,runif(200)+2,runif(200)+3,              runif(200),runif(200)+1,runif(200)+2,runif(200)+3),4)*100 cellType <- factor(paste('c',rep(rep(c(1:2),rep(200,2)),4),sep = '')) imageID <- rep(c('s1', 's2'),c(800,800))  cells <- data.frame(x, y, cellType, imageID)  ggplot(cells, aes(x,y, colour = cellType)) + geom_point() + facet_wrap(~imageID)"},{"path":"/articles/lisaClust.html","id":"create-segmentedcellexperiment-object","dir":"Articles","previous_headings":"Quick start","what":"Create SegmentedCellExperiment object","title":"Introduction to Clustering of Local Indicators of Spatial Assocation (LISA) curves","text":"First store data SegmentedCells object.","code":"cellExp <- SegmentedCells(cells, cellTypeString = 'cellType')"},{"path":"/articles/lisaClust.html","id":"running-lisaclust","dir":"Articles","previous_headings":"Quick start","what":"Running lisaCLust","title":"Introduction to Clustering of Local Indicators of Spatial Assocation (LISA) curves","text":"can use convience function lisaClust simultaneously calculate local indicators spatial association (LISA) functions using lisa function perform k-means clustering.","code":"cellExp <- lisaClust(cellExp, k = 2)"},{"path":"/articles/lisaClust.html","id":"plot-identified-regions","dir":"Articles","previous_headings":"Quick start","what":"Plot identified regions","title":"Introduction to Clustering of Local Indicators of Spatial Assocation (LISA) curves","text":"hatchingPlot function can used construct ggplot object regions marked different hatching patterns. allows us plot regions cell-types visualization.","code":"hatchingPlot(cellExp, useImages = c('s1','s2'))"},{"path":"/articles/lisaClust.html","id":"using-other-clustering-methods-","dir":"Articles","previous_headings":"Quick start","what":"Using other clustering methods.","title":"Introduction to Clustering of Local Indicators of Spatial Assocation (LISA) curves","text":"lisaClust function convenient, implemented exhaustive suite clustering methods easy . just two simple steps.","code":""},{"path":"/articles/lisaClust.html","id":"generate-lisa-curves","dir":"Articles","previous_headings":"Quick start > Using other clustering methods.","what":"Generate LISA curves","title":"Introduction to Clustering of Local Indicators of Spatial Assocation (LISA) curves","text":"can calculate local indicators spatial association (LISA) functions using lisa function. LISA curves localised summary L-function Poisson point process model. radii calculated can set Rs.","code":"lisaCurves <- lisa(cellExp, Rs = c(20, 50, 100))"},{"path":"/articles/lisaClust.html","id":"perform-some-clustering","dir":"Articles","previous_headings":"Quick start > Using other clustering methods.","what":"Perform some clustering","title":"Introduction to Clustering of Local Indicators of Spatial Assocation (LISA) curves","text":"LISA curves can used cluster cells. use k-means clustering, clustering methods like SOM used. can store cell clusters cell “regions” SegmentedCells object using cellAnnotation() <- function.","code":"kM <- kmeans(lisaCurves,2) cellAnnotation(cellExp, \"region\") <- paste('region',kM$cluster,sep = '_')"},{"path":"/articles/lisaClust.html","id":"alternative-hatching-plot","dir":"Articles","previous_headings":"Quick start","what":"Alternative hatching plot","title":"Introduction to Clustering of Local Indicators of Spatial Assocation (LISA) curves","text":"also create plot using geom_hatching scale_region_manual. ## Faster ploting hatchingPlot can quite slow large images high nbp linewidth. often useful simply plot regions without cell type information.","code":"df <- as.data.frame(cellSummary(cellExp))  p <- ggplot(df,aes(x = x,y = y, colour = cellType, region = region)) +    geom_point() +    facet_wrap(~imageID) +   geom_hatching(window = \"concave\",                  line.spacing = 11,                  nbp = 50,                  line.width = 2,                  hatching.colour = \"gray20\",                 window.length = NULL) +   theme_minimal() +    scale_region_manual(values = 6:7, labels = c('ab','cd'))  p df <- as.data.frame(cellSummary(cellExp)) df <- df[df$imageID == \"s1\", ]  p <- ggplot(df,aes(x = x,y = y, colour  = region)) +    geom_point() +   theme_classic() p"},{"path":"/articles/lisaClust.html","id":"using-a-singlecellexperiment","dir":"Articles","previous_headings":"","what":"Using a SingleCellExperiment","title":"Introduction to Clustering of Local Indicators of Spatial Assocation (LISA) curves","text":"lisaClust function also works SingleCellExperiment. First lets create SingleCellExperiment object. lisaClust just needs columns colData corresponding x y coordinates cells, column annotating cell types cells column indicating image cell came . can plot regions using following.","code":"sce <- SingleCellExperiment(colData = cellSummary(cellExp)) sce <- lisaClust(sce,                   k = 2,                   spatialCoords = c(\"x\", \"y\"),                   cellType = \"cellType\",                  imageID = \"imageID\") hatchingPlot(sce)"},{"path":"/articles/lisaClust.html","id":"damond-et-al--islet-data-","dir":"Articles","previous_headings":"","what":"Damond et al. islet data.","title":"Introduction to Clustering of Local Indicators of Spatial Assocation (LISA) curves","text":"apply lisaClust framework three images pancreatic islets Map Human Type 1 Diabetes Progression Imaging Mass Cytometry Damond et al. (2019).","code":""},{"path":"/articles/lisaClust.html","id":"read-in-data","dir":"Articles","previous_headings":"Damond et al. islet data.","what":"Read in data","title":"Introduction to Clustering of Local Indicators of Spatial Assocation (LISA) curves","text":"start reading data storing SegmentedCells object. data format consistent outputted CellProfiler.","code":"isletFile <- system.file(\"extdata\",\"isletCells.txt.gz\", package = \"spicyR\") cells <- read.table(isletFile, header = TRUE) cellExp <- SegmentedCells(cells, cellProfiler = TRUE)"},{"path":"/articles/lisaClust.html","id":"cluster-cell-types","dir":"Articles","previous_headings":"Damond et al. islet data.","what":"Cluster cell-types","title":"Introduction to Clustering of Local Indicators of Spatial Assocation (LISA) curves","text":"data include annotation cell-types cell. extract marker intensities SegmentedCells object using cellMarks. perform k-means clustering eight clusters store cell-type clusters SegmentedCells object using cellType() <-.","code":"markers <- cellMarks(cellExp) kM <- kmeans(markers,10) cellType(cellExp) <- paste('cluster', kM$cluster, sep = '')"},{"path":"/articles/lisaClust.html","id":"generate-lisa-curves-1","dir":"Articles","previous_headings":"Damond et al. islet data.","what":"Generate LISA curves","title":"Introduction to Clustering of Local Indicators of Spatial Assocation (LISA) curves","text":", can calculate perform k-means clustering local indicators spatial association (LISA) functions using lisaClust function. regions stored cellExp can extracted.","code":"cellExp <- lisaClust(cellExp, k = 2, Rs = c(10,20,50)) cellAnnotation(cellExp, \"region\") |>   head() ## [1] \"region_1\" \"region_1\" \"region_1\" \"region_1\" \"region_1\" \"region_1\""},{"path":"/articles/lisaClust.html","id":"examine-cell-type-enrichment","dir":"Articles","previous_headings":"Damond et al. islet data.","what":"Examine cell type enrichment","title":"Introduction to Clustering of Local Indicators of Spatial Assocation (LISA) curves","text":"check see cell types appear frequently region expected chance.","code":"regionMap(cellExp, type = \"bubble\")"},{"path":"/articles/lisaClust.html","id":"plot-identified-regions-1","dir":"Articles","previous_headings":"Damond et al. islet data.","what":"Plot identified regions","title":"Introduction to Clustering of Local Indicators of Spatial Assocation (LISA) curves","text":"Finally, can use hatchingPlot construct ggplot object regions marked different hatching patterns. allows us visualize two regions ten cell-types simultaneously.","code":"hatchingPlot(cellExp)"},{"path":"/articles/lisaClust.html","id":"sessioninfo","dir":"Articles","previous_headings":"","what":"sessionInfo()","title":"Introduction to Clustering of Local Indicators of Spatial Assocation (LISA) curves","text":"","code":"sessionInfo() ## R version 4.2.2 (2022-10-31) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: EndeavourOS ##  ## Matrix products: default ## BLAS:   /usr/lib/libblas.so.3.11.0 ## LAPACK: /usr/lib/liblapack.so.3.11.0 ##  ## locale: ##  [1] LC_CTYPE=en_AU.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_AU.UTF-8        LC_COLLATE=en_AU.UTF-8     ##  [5] LC_MONETARY=en_AU.UTF-8    LC_MESSAGES=en_AU.UTF-8    ##  [7] LC_PAPER=en_AU.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_AU.UTF-8 LC_IDENTIFICATION=C        ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] SingleCellExperiment_1.20.0 SummarizedExperiment_1.28.0 ##  [3] Biobase_2.58.0              GenomicRanges_1.50.1        ##  [5] GenomeInfoDb_1.34.2         IRanges_2.32.0              ##  [7] S4Vectors_0.36.0            BiocGenerics_0.44.0         ##  [9] MatrixGenerics_1.10.0       matrixStats_0.62.0          ## [11] ggplot2_3.4.0               spicyR_1.10.0               ## [13] lisaClust_1.5.6             BiocStyle_2.26.0            ##  ## loaded via a namespace (and not attached): ##   [1] systemfonts_1.0.4         splines_4.2.2             ##   [3] BiocParallel_1.32.1       scam_1.2-13               ##   [5] digest_0.6.30             htmltools_0.5.3           ##   [7] magick_2.7.3              lmerTest_3.1-3            ##   [9] fansi_1.0.3               magrittr_2.0.3            ##  [11] memoise_2.0.1             SpatialExperiment_1.8.0   ##  [13] tensor_1.5                limma_3.54.0              ##  [15] R.utils_2.12.2            pkgdown_2.0.6             ##  [17] spatstat.sparse_3.0-0     colorspace_2.0-3          ##  [19] textshaping_0.3.6         xfun_0.34                 ##  [21] dplyr_1.0.10              RCurl_1.98-1.9            ##  [23] jsonlite_1.8.3            lme4_1.1-31               ##  [25] spatstat.data_3.0-0       glue_1.6.2                ##  [27] polyclip_1.10-4           gtable_0.3.1              ##  [29] zlibbioc_1.44.0           XVector_0.38.0            ##  [31] DelayedArray_0.24.0       V8_4.2.2                  ##  [33] DropletUtils_1.18.0       Rhdf5lib_1.20.0           ##  [35] HDF5Array_1.26.0          abind_1.4-5               ##  [37] scales_1.2.1              pheatmap_1.0.12           ##  [39] DBI_1.1.3                 edgeR_3.40.0              ##  [41] spatstat.random_3.0-1     Rcpp_1.0.9                ##  [43] spatstat.core_2.4-4       dqrng_0.3.0               ##  [45] RColorBrewer_1.1-3        ellipsis_0.3.2            ##  [47] pkgconfig_2.0.3           R.methodsS3_1.8.2         ##  [49] farver_2.1.1              scuttle_1.8.0             ##  [51] sass_0.4.2                deldir_1.0-6              ##  [53] locfit_1.5-9.6            utf8_1.2.2                ##  [55] tidyselect_1.2.0          labeling_0.4.2            ##  [57] rlang_1.0.6               munsell_0.5.0             ##  [59] tools_4.2.2               cachem_1.0.6              ##  [61] cli_3.4.1                 generics_0.1.3            ##  [63] evaluate_0.18             stringr_1.4.1             ##  [65] fastmap_1.1.0             fftwtools_0.9-11          ##  [67] yaml_2.3.6                ragg_1.2.4                ##  [69] goftest_1.2-3             knitr_1.40                ##  [71] fs_1.5.2                  purrr_0.3.5               ##  [73] nlme_3.1-160              sparseMatrixStats_1.10.0  ##  [75] R.oo_1.25.0               concaveman_1.1.0          ##  [77] compiler_4.2.2            curl_4.3.3                ##  [79] spatstat.utils_3.0-1      tibble_3.1.8              ##  [81] tweenr_2.0.2              bslib_0.4.1               ##  [83] stringi_1.7.8             highr_0.9                 ##  [85] desc_1.4.2                lattice_0.20-45           ##  [87] Matrix_1.5-3              nloptr_2.0.3              ##  [89] vctrs_0.5.0               pillar_1.8.1              ##  [91] lifecycle_1.0.3           rhdf5filters_1.10.0       ##  [93] BiocManager_1.30.19       spatstat.geom_3.0-3       ##  [95] jquerylib_0.1.4           data.table_1.14.4         ##  [97] bitops_1.0-7              R6_2.5.1                  ##  [99] bookdown_0.30             codetools_0.2-18          ## [101] boot_1.3-28               MASS_7.3-58.1             ## [103] assertthat_0.2.1          rhdf5_2.42.0              ## [105] rprojroot_2.0.3           rjson_0.2.21              ## [107] withr_2.5.0               GenomeInfoDbData_1.2.9    ## [109] mgcv_1.8-41               parallel_4.2.2            ## [111] grid_4.2.2                rpart_4.1.19              ## [113] beachmat_2.14.0           tidyr_1.2.1               ## [115] class_7.3-20              minqa_1.2.5               ## [117] rmarkdown_2.18            DelayedMatrixStats_1.20.0 ## [119] spatstat.explore_3.0-5    ggforce_0.4.1             ## [121] numDeriv_2016.8-1.1"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ellis Patrick. Author, maintainer. Nicolas Canete. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Patrick E, Canete N (2022). lisaClust: lisaClust: Clustering Local Indicators Spatial Association. R package version 1.5.6.","code":"@Manual{,   title = {lisaClust: lisaClust: Clustering of Local Indicators of Spatial Association},   author = {Ellis Patrick and Nicolas Canete},   year = {2022},   note = {R package version 1.5.6}, }"},{"path":"/index.html","id":"lisaclust","dir":"","previous_headings":"","what":"lisaClust: Clustering of Local Indicators of Spatial Association","title":"lisaClust: Clustering of Local Indicators of Spatial Association","text":"Clustering Local Indicators Spatial Association","code":""},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"lisaClust: Clustering of Local Indicators of Spatial Association","text":"lisaClust provides series functions identify visualise regions tissue spatial associations cell-types similar. package can used provide high-level summary cell-type colocalisation multiplexed imaging data segmented single-cell resolution.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"lisaClust: Clustering of Local Indicators of Spatial Association","text":"Bioconductor release version, run following. like --date features, install recent development version.","code":"if (!require(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  BiocManager::install(\"lisaClust\") # Install the development version from Bioconductor: if (!require(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  # The following initializes usage of Bioc devel # This will update all your Bioconductor packages to devel version BiocManager::install(version='devel')  BiocManager::install(\"lisaClust\")  # Otherwise install the development version from GitHub: # install.packages(\"devtools\") devtools::install_github(\"ellispatrick/lisaClust\") library(lisaClust)"},{"path":"/index.html","id":"submitting-an-issue-or-feature-request","dir":"","previous_headings":"","what":"Submitting an issue or feature request","title":"lisaClust: Clustering of Local Indicators of Spatial Association","text":"listClust still active development. greatly appreciate feedback related package. R package related issues raised . general questions feedback, please contact us directly via ellis.patrick@sydney.edu.au.","code":""},{"path":"/index.html","id":"authors","dir":"","previous_headings":"","what":"Authors","title":"lisaClust: Clustering of Local Indicators of Spatial Association","text":"Nicolas Canete Ellis Patrick - @TheEllisPatrick","code":""},{"path":"/reference/hatchingPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"hatchingPlot — hatchingPlot","title":"hatchingPlot — hatchingPlot","text":"hatchingPlot() function used create hatching patterns representating  spatial regions cell-types. hatching geom used create hatching patterns representation spatial regions.","code":""},{"path":"/reference/hatchingPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hatchingPlot — hatchingPlot","text":"","code":"hatchingPlot(   data,   imageID = NULL,   regionName = \"region\",   window = \"concave\",   line.spacing = 21,   hatching.colour = 1,   nbp = 50,   window.length = NULL )  geom_hatching(   mapping = NULL,   data = NULL,   stat = \"identity\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   line.spacing = 21,   hatching.colour = 1,   window = \"concave\",   window.length = NULL,   nbp = 250,   line.width = 1,   ... )"},{"path":"/reference/hatchingPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"hatchingPlot — hatchingPlot","text":"data data displayed layer. three options: NULL, default, data inherited plot data specified  call ggplot(). data.frame, object, override plot  data. objects fortified produce data frame. See fortify()  variables created. function called single argument,   plot data. return value must data.frame, used   layer data. function can created formula (e.g. ~ head(.x, 10)). imageID vector imageIDs plotted. regionName Name region plot. window window around regions 'square', 'convex' 'concave'. line.spacing integer indicating spacing hatching lines. hatching.colour colour hatching. nbp integer tuning granularity grid used defining regions window.length tuning parameter controlling level concavity  estimating concave windows. mapping Set aesthetic mappings created aes() aes_(). specified  inherit.aes = TRUE (default), combined default mapping  top level plot. must supply mapping plot mapping. stat statistical transformation use data layer string. position adjustment, either string, result call  position adjustment function. na.rm FALSE, default, missing values removed warning.  TRUE, missing values silently removed. show.legend logical. layer included legends? NA,  default, includes aesthetics mapped. FALSE never includes,  TRUE always includes. can also named logical vector finely select  aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather  combining . useful helper functions define  data aesthetics inherit behaviour default plot  specification, e.g. borders(). line.width numeric controlling width hatching lines ... arguments passed layer(). often aesthetics,  used set aesthetic fixed value, like colour = \"red\" size = 3.  may also parameters paired geom/stat.","code":""},{"path":"/reference/hatchingPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"hatchingPlot — hatchingPlot","text":"ggplot object ggplot geom","code":""},{"path":"/reference/hatchingPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"hatchingPlot — hatchingPlot","text":"","code":"library(spicyR) ## Generate toy data set.seed(51773) x <- round(c(runif(200),runif(200)+1,runif(200)+2,runif(200)+3,              runif(200)+3,runif(200)+2,runif(200)+1,runif(200)),4)*100  y <- round(c(runif(200),runif(200)+1,runif(200)+2,runif(200)+3,               runif(200),runif(200)+1,runif(200)+2,runif(200)+3),4)*100 cellType <- factor(paste('c',rep(rep(c(1:2),rep(200,2)),4),sep = '')) imageID <- rep(c('s1', 's2'),c(800,800)) cells <- data.frame(x, y, cellType, imageID)  ## Store data in SegmentedCells object cellExp <- SegmentedCells(cells, cellTypeString = 'cellType') #> There is no cellID. I'll create these #> There is no image specific imageCellID. I'll create these  ## Generate regions cellExp <- lisaClust(cellExp, k = 2) #> Generating local L-curves. If you run out of memory, try 'fast = FALSE'. #> Creating variable region  ## Plot regions hatchingPlot(cellExp) #> Concave windows are temperamental. Try choosing values of window.length > and < 1 if you have problems.     library(ggplot2)  # Extract the region information along with x-y coordinates df <- as.data.frame(cellSummary(cellExp))  # Plot the regions with geom_hatching() p <- ggplot(df,aes(x = x,y = y, colour = cellType, region = region)) + geom_point() + facet_wrap(~imageID) + geom_hatching()"},{"path":"/reference/lisa.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate local indicators of spatial association — lisa","title":"Generate local indicators of spatial association — lisa","text":"Generate local indicators spatial association","code":""},{"path":"/reference/lisa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate local indicators of spatial association — lisa","text":"","code":"lisa(   cells,   Rs = NULL,   BPPARAM = BiocParallel::SerialParam(),   window = \"convex\",   window.length = NULL,   whichParallel = \"imageID\",   sigma = NULL,   lisaFunc = \"K\",   minLambda = 0.05,   fast = TRUE,   spatialCoords = c(\"x\", \"y\"),   cellType = \"cellType\",   imageID = \"imageID\" )"},{"path":"/reference/lisa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate local indicators of spatial association — lisa","text":"cells SegmentedCells, SingleCellExperiment, SpatialExperiment data frame contains least  variables x y, giving  coordinates cell, imageID cellType. Rs vector radii measures association calculated. BPPARAM BiocParallelParam object. window window around regions 'square', 'convex' 'concave'. window.length tuning parameter controlling level concavity  estimating concave windows. whichParallel function use parallization imageID  cellType. sigma numeric variable used scaling filting inhomogeneous L-curves. lisaFunc Either \"K\" \"L\" curve. minLambda Minimum value density scaling fitting inhomogeneous L-curves. fast logical describing whether use fast approximation  inhomogeneous local L-curves. spatialCoords columns contain x y spatial coordinates. cellType column contains cell types. imageID column contains image identifiers.","code":""},{"path":"/reference/lisa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate local indicators of spatial association — lisa","text":"matrix LISA curves","code":""},{"path":"/reference/lisa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate local indicators of spatial association — lisa","text":"","code":"library(spicyR) # Read in data as a SegmentedCells objects isletFile <- system.file(\"extdata\",\"isletCells.txt.gz\", package = \"spicyR\") cells <- read.table(isletFile, header=TRUE) cellExp <- SegmentedCells(cells, cellProfiler = TRUE) #> There is no cellType column, setting to NA #> Warning: The dim() method for DataFrameList objects is deprecated. Please use #>   dims() on these objects instead. #> Warning: The nrow() method for DataFrameList objects is deprecated. Please use #>   nrows() on these objects instead. #> Warning: The ncol() method for CompressedSplitDataFrameList objects is #>   deprecated. Please use ncols() on these objects instead. #> Warning: The dim() method for DataFrameList objects is deprecated. Please use #>   dims() on these objects instead. #> Warning: The nrow() method for DataFrameList objects is deprecated. Please use #>   nrows() on these objects instead. #> Warning: The ncol() method for CompressedSplitDataFrameList objects is #>   deprecated. Please use ncols() on these objects instead. #> Warning: The dim() method for DataFrameList objects is deprecated. Please use #>   dims() on these objects instead. #> Warning: The nrow() method for DataFrameList objects is deprecated. Please use #>   nrows() on these objects instead. #> Warning: The ncol() method for CompressedSplitDataFrameList objects is #>   deprecated. Please use ncols() on these objects instead. #> Warning: The dim() method for DataFrameList objects is deprecated. Please use #>   dims() on these objects instead. #> Warning: The nrow() method for DataFrameList objects is deprecated. Please use #>   nrows() on these objects instead. #> Warning: The ncol() method for CompressedSplitDataFrameList objects is #>   deprecated. Please use ncols() on these objects instead.  # Cluster cell types markers <- cellMarks(cellExp) kM <- kmeans(markers,8) cellType(cellExp) <- paste('cluster',kM$cluster, sep = '')  # Generate LISA lisaCurves <- lisa(cellExp) #> Generating local L-curves. If you run out of memory, try 'fast = FALSE'.  # Cluster the LISA curves kM <- kmeans(lisaCurves,2) cellAnnotation(cellExp, \"region\") <- paste('region',kM$cluster,sep = '_') #> Creating variable region"},{"path":"/reference/lisaClust.html","id":null,"dir":"Reference","previous_headings":"","what":"Use k-means clustering to cluster local indicators of spatial association. For other clustering use lisa. — lisaClust","title":"Use k-means clustering to cluster local indicators of spatial association. For other clustering use lisa. — lisaClust","text":"Use k-means clustering cluster local indicators spatial association. clustering use lisa.","code":""},{"path":"/reference/lisaClust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use k-means clustering to cluster local indicators of spatial association. For other clustering use lisa. — lisaClust","text":"","code":"lisaClust(   cells,   k = 2,   Rs = NULL,   spatialCoords = c(\"x\", \"y\"),   cellType = \"cellType\",   imageID = \"imageID\",   regionName = \"region\",   BPPARAM = BiocParallel::SerialParam(),   window = \"convex\",   window.length = NULL,   whichParallel = \"imageID\",   sigma = NULL,   lisaFunc = \"K\",   minLambda = 0.05,   fast = TRUE )"},{"path":"/reference/lisaClust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use k-means clustering to cluster local indicators of spatial association. For other clustering use lisa. — lisaClust","text":"cells SegmentedCells, SingleCellExperiment, SpatialExperiment data frame contains least  variables x y, giving  coordinates cell, imageID cellType. k number regions cluster. Rs vector radii measures association calculated. spatialCoords columns contain x y spatial coordinates. cellType column contains cell types. imageID column contains image identifiers. regionName output column lisaClust regions. BPPARAM BiocParallelParam object. window window around regions 'square', 'convex' 'concave'. window.length tuning parameter controlling level concavity  estimating concave windows. whichParallel function use parallization imageID  cellType. sigma numeric variable used scaling filting inhomogeneous L-curves. lisaFunc Either \"K\" \"L\" curve. minLambda Minimum value density scaling fitting inhomogeneous L-curves. fast logical describing whether use fast approximation  inhomogeneous local L-curves.","code":""},{"path":"/reference/lisaClust.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use k-means clustering to cluster local indicators of spatial association. For other clustering use lisa. — lisaClust","text":"matrix LISA curves","code":""},{"path":"/reference/lisaClust.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use k-means clustering to cluster local indicators of spatial association. For other clustering use lisa. — lisaClust","text":"","code":"library(spicyR) # Read in data as a SegmentedCells objects isletFile <- system.file(\"extdata\",\"isletCells.txt.gz\", package = \"spicyR\") cells <- read.table(isletFile, header=TRUE) cellExp <- SegmentedCells(cells, cellProfiler = TRUE) #> There is no cellType column, setting to NA #> Warning: The dim() method for DataFrameList objects is deprecated. Please use #>   dims() on these objects instead. #> Warning: The nrow() method for DataFrameList objects is deprecated. Please use #>   nrows() on these objects instead. #> Warning: The ncol() method for CompressedSplitDataFrameList objects is #>   deprecated. Please use ncols() on these objects instead. #> Warning: The dim() method for DataFrameList objects is deprecated. Please use #>   dims() on these objects instead. #> Warning: The nrow() method for DataFrameList objects is deprecated. Please use #>   nrows() on these objects instead. #> Warning: The ncol() method for CompressedSplitDataFrameList objects is #>   deprecated. Please use ncols() on these objects instead. #> Warning: The dim() method for DataFrameList objects is deprecated. Please use #>   dims() on these objects instead. #> Warning: The nrow() method for DataFrameList objects is deprecated. Please use #>   nrows() on these objects instead. #> Warning: The ncol() method for CompressedSplitDataFrameList objects is #>   deprecated. Please use ncols() on these objects instead. #> Warning: The dim() method for DataFrameList objects is deprecated. Please use #>   dims() on these objects instead. #> Warning: The nrow() method for DataFrameList objects is deprecated. Please use #>   nrows() on these objects instead. #> Warning: The ncol() method for CompressedSplitDataFrameList objects is #>   deprecated. Please use ncols() on these objects instead.  # Cluster cell types markers <- cellMarks(cellExp) kM <- kmeans(markers,8) cellType(cellExp) <- paste('cluster',kM$cluster, sep = '')  # Generate LISA cellExp <- lisaClust(cellExp, k = 2) #> Generating local L-curves. If you run out of memory, try 'fast = FALSE'. #> Creating variable region"},{"path":"/reference/regionMap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot heatmap of cell type enrichment for lisaClust regions — regionMap","title":"Plot heatmap of cell type enrichment for lisaClust regions — regionMap","text":"Plot heatmap cell type enrichment lisaClust regions","code":""},{"path":"/reference/regionMap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot heatmap of cell type enrichment for lisaClust regions — regionMap","text":"","code":"regionMap(   cells,   type = \"bubble\",   cellType = \"cellType\",   region = \"region\",   limit = c(0.33, 3),   ... )"},{"path":"/reference/regionMap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot heatmap of cell type enrichment for lisaClust regions — regionMap","text":"cells SegmentedCells, SingleCellExperiment, SpatialExperiment data.frame type Make \"bubble\" \"heatmap\" plot. cellType column storing cell types region column storing regions limit limits lower upper relative frequencies ... arguments passed pheatmap package","code":""},{"path":"/reference/regionMap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot heatmap of cell type enrichment for lisaClust regions — regionMap","text":"bubble plot heatmap","code":""},{"path":"/reference/regionMap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot heatmap of cell type enrichment for lisaClust regions — regionMap","text":"","code":"set.seed(51773) x <- round(c(runif(200),runif(200)+1,runif(200)+2,runif(200)+3,             runif(200)+3,runif(200)+2,runif(200)+1,runif(200)),4)*100 y <- round(c(runif(200),runif(200)+1,runif(200)+2,runif(200)+3,             runif(200),runif(200)+1,runif(200)+2,runif(200)+3),4)*100 cellType <- factor(paste('c',rep(rep(c(1:2),rep(200,2)),4),sep = '')) imageID <- rep(c('s1', 's2'),c(800,800))  cells <- data.frame(x, y, cellType, imageID)  cellExp <- spicyR::SegmentedCells(cells, cellTypeString = 'cellType') #> There is no cellID. I'll create these #> There is no image specific imageCellID. I'll create these  cellExp <- lisaClust(cellExp, k = 2) #> Generating local L-curves. If you run out of memory, try 'fast = FALSE'. #> Creating variable region  regionMap(cellExp)"},{"path":"/reference/scale_region.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale constructor for regions — scale_region","title":"Scale constructor for regions — scale_region","text":"Region scale constructor.","code":""},{"path":"/reference/scale_region.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale constructor for regions — scale_region","text":"","code":"scale_region(aesthetics = \"region\", ..., guide = \"legend\")  scale_region_manual(..., values)"},{"path":"/reference/scale_region.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scale constructor for regions — scale_region","text":"aesthetics names aesthetics scale works ... Arguments passed discrete_scale guide function used create guide name. See guides() info. values set aesthetic values map data values .  named vector, values matched based names. unnamed,  values matched order (usually alphabetical) limits scale.  data values match given na.value.","code":""},{"path":"/reference/scale_region.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scale constructor for regions — scale_region","text":"ggplot guide","code":""},{"path":"/reference/scale_region.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scale constructor for regions — scale_region","text":"","code":"library(spicyR) ## Generate toy data set.seed(51773) x <- round(c(runif(200),runif(200)+1,runif(200)+2,runif(200)+3,              runif(200)+3,runif(200)+2,runif(200)+1,runif(200)),4)*100  y <- round(c(runif(200),runif(200)+1,runif(200)+2,runif(200)+3,               runif(200),runif(200)+1,runif(200)+2,runif(200)+3),4)*100 cellType <- factor(paste('c',rep(rep(c(1:2),rep(200,2)),4),sep = '')) imageID <- rep(c('s1', 's2'),c(800,800)) cells <- data.frame(x, y, cellType, imageID)  ## Store data in SegmentedCells object cellExp <- SegmentedCells(cells) #> There is no cellID. I'll create these #> There is no image specific imageCellID. I'll create these  ## Generate regions cellExp <- lisaClust(cellExp, k = 2) #> Generating local L-curves. If you run out of memory, try 'fast = FALSE'. #> Creating variable region  # Plot the regions with hatchingPlot() hatchingPlot(cellExp) + scale_region_manual(values = c(1,4), labels = c(\"Region A\", \"Region B\"),  name = \"Regions\") #> Scale for region is already present. #> Adding another scale for region, which will replace the existing scale. #> Concave windows are temperamental. Try choosing values of window.length > and < 1 if you have problems."}]
